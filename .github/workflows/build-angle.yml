name: Build ANGLE

on:
  workflow_dispatch:
    inputs:
      angle-branch:
        description: 'Git branch of ANGLE to build'
        required: true
        default: chromium/6793
      rendering-backend:
        description: 'Rendering backend to build'
        required: true
        type: choice
        options:
          - default
          - d3d9
          - d3d11
          - gl
          - metal
          - vulkan
          - essl
          - glsl
        default: default
      upload-artifacts:
        description: 'Upload build artifacts to S3 storage'
        required: true
        type: boolean
        default: true
      s3-storage-endpoint:
        description: 'URL endpoint of the S3 storage.'
        required: true
        default: 'https://storage.byteplug.io'
      s3-bucket-name:
        description: 'Name of the S3 bucket'
        required: true
        default: 'intjelic'
      s3-path-prefix:
        description: 'Path prefix within the S3 bucket'
        default: '.'

jobs:
  # build-macos:
  #   runs-on: macos-latest
  #   steps:
  #     - name: Restore depot tools
  #       id: cache-depot-tools
  #       uses: actions/cache/restore@v4
  #       with:
  #         path: depot_tools
  #         key: depot-tools-macos

  #     - name: Install depot tools
  #       if: steps.cache-depot-tools.outputs.cache-hit != 'true'
  #       run: |
  #         git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git

  #     - name: Cache depot tools
  #       if: steps.cache-depot-tools.outputs.cache-hit != 'true'
  #       uses: actions/cache/save@v4
  #       with:
  #         path: depot_tools
  #         key: depot-tools-macos

  #     - name: Restore ANGLE repository
  #       id: cache-angle
  #       uses: actions/cache/restore@v4
  #       with:
  #         path: angle.tar.gz
  #         # XXX: Rename the key to remove the '/'  character
  #         key: angle-${{ github.event.inputs['angle-branch'] }}-macos

  #     - name: Clone ANGLE repository
  #       if: steps.cache-angle.outputs.cache-hit != 'true'
  #       uses: actions/checkout@v4
  #       with:
  #         repository: google/angle
  #         ref: ${{ github.event.inputs['angle-branch'] }}
  #         path: angle

  #     - name: Synchronize ANGLE repository
  #       if: steps.cache-angle.outputs.cache-hit != 'true'
  #       run: |
  #         export PATH="${PWD}/depot_tools:${PATH}"
  #         cd angle
  #         python scripts/bootstrap.py
  #         gclient sync
  #         cd ../
  #         tar -czf angle.tar.gz angle
  #         rm -rf angle

  #     - name: Cache ANGLE repository
  #       if: steps.cache-angle.outputs.cache-hit != 'true'
  #       uses: actions/cache/save@v4
  #       with:
  #         path: angle.tar.gz
  #         # XXX: Rename the key to remove the '/'  character
  #         key: angle-${{ github.event.inputs['angle-branch'] }}-macos

  #     - name: Build ANGLE
  #       run: |
  #         tar -xzf angle.tar.gz
  #         export PATH="${PWD}/depot_tools:${PATH}"
  #         cd angle
  #         gn gen out/Release --args='is_debug=false angle_enable_d3d9=false angle_enable_d3d11=false angle_enable_gl=false angle_enable_metal=true angle_enable_null=false angle_enable_vulkan=false angle_enable_essl=false angle_enable_glsl=false'
  #         ninja -j3 -k1 -C out/Release

  #     - name: Upload libEGL.dylib
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: macos-angle-lib-egl
  #         path: angle/out/Release/libEGL.dylib

  #     - name: Upload libGLESv2.dylib
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: macos-angle-lib-gles2
  #         path: angle/out/Release/libGLESv2.dylib

  #     # XXX: Just to be sure I'm uploading all .dylib files but not all should
  #     #      be relevant.
  #     - name: Zip ANGLE build
  #       run: |
  #         tar -czf angle-build.tar.gz angle/out/Release/*.dylib

  #     - name: Upload ANGLE build
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: angle-build-macos
  #         path: angle-build.tar.gz

  build-windows:
    runs-on: windows-latest
    steps:
      - name: Restore depot tools
        id: cache-depot-tools
        uses: actions/cache/restore@v4
        with:
          path: depot_tools
          key: depot-tools-windows

      - name: Install depot tools
        if: steps.cache-depot-tools.outputs.cache-hit != 'true'
        run: |
          git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git

      - name: Cache depot tools
        if: steps.cache-depot-tools.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: depot_tools
          key: depot-tools-windows

      - name: Restore ANGLE repository
        id: cache-angle
        uses: actions/cache/restore@v4
        with:
          path: angle.tar.gz
          # XXX: Rename the key to remove the '/'  character
          key: angle-${{ github.event.inputs['angle-branch'] }}-windows

      - name: Clone ANGLE repository
        if: steps.cache-angle.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          repository: google/angle
          ref: ${{ github.event.inputs['angle-branch'] }}
          path: angle

      - name: Synchronize ANGLE repository
        if: steps.cache-angle.outputs.cache-hit != 'true'
        run: |
          $env:PATH = "$PWD\depot_tools;$env:PATH"
          $env:DEPOT_TOOLS_WIN_TOOLCHAIN = "0"
          cd angle
          python scripts/bootstrap.py
          gclient sync
          cd ..
          tar -czf angle.tar.gz angle
          rm -r -fo angle

      - name: Cache ANGLE repository
        if: steps.cache-angle.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: angle.tar.gz
          # XXX: Rename the key to remove the '/'  character
          key: angle-${{ github.event.inputs['angle-branch'] }}-windows

      - name: Build ANGLE
        run: |
          tar -xzf angle.tar.gz
          $env:PATH = "$PWD\depot_tools;$env:PATH"
          $env:DEPOT_TOOLS_WIN_TOOLCHAIN = "0"
          cd angle
          ls
          gn gen out/Release --args="is_debug=false angle_enable_d3d9=false angle_enable_d3d11=true angle_enable_gl=false angle_enable_metal=false angle_enable_null=false angle_enable_vulkan=false angle_enable_essl=false angle_enable_glsl=false"
          ls out/Release
          autoninja -C out/Release

      - name: Upload libEGL.lib
        uses: actions/upload-artifact@v4
        with:
          name: windows-angle-lib-egl
          path: angle/out/Release/libEGL.lib

      - name: Upload libGLESv2.lib
        uses: actions/upload-artifact@v4
        with:
          name: windows-angle-lib-gles2
          path: angle/out/Release/libGLESv2.lib

      # XXX: Just to be sure I'm uploading all .lib files but not all should
      #      be relevant.
      - name: Zip ANGLE build
        run: |
          tar -czf angle-build.tar.gz angle/out/Release/*.lib

      - name: Upload ANGLE build
        uses: actions/upload-artifact@v4
        with:
          name: angle-build-windows
          path: angle-build.tar.gz
